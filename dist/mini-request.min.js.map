{"version":3,"file":"mini-request.min.js","sources":["../src/cancel/Cancel.ts","../src/cancel/CancelToken.ts","../src/helpers/utils.ts","../src/cancel/isCancel.ts","../src/helpers/transformMethod.ts","../src/adapters/Adapter.ts","../src/adapters/index.ts","../src/helpers/normalizeHeaderName.ts","../src/defaults.ts","../src/helpers/setContentTypeIfUnset.ts","../src/error/isNetworkError.ts","../src/error/isTimeout.ts","../src/helpers/combineURLs.ts","../src/helpers/isAbsoluteURL.ts","../src/helpers/transformUrl.ts","../src/core/InterceptorManager.ts","../src/core/mergeConfig.ts","../src/helpers/assembleHeaders.ts","../src/core/transformConfig.ts","../src/helpers/copyConfig.ts","../src/core/transformData.ts","../src/cookie/getCookies.ts","../src/cookie/parseCookie.ts","../src/core/AppletsRequestError.ts","../src/core/request.ts","../src/cookie/writeCookies.ts","../src/core/AppletsRequest.ts","../src/appletsRequest.ts"],"sourcesContent":["export default class Cancel {\n  message = \"\";\n\n  isCancel = true;\n\n  constructor(message: string) {\n    this.message = message;\n  }\n\n  toString(): string {\n    return `Cancel: ${this.message || \"\"}`;\n  }\n}\n","import Cancel from \"./Cancel\";\n\ninterface ISourceReturn {\n  token: CancelToken;\n  cancel: CancelToken[\"cancel\"];\n}\n\nexport default class CancelToken {\n  private reason: Cancel | undefined;\n\n  private promise: Promise<IAppletsRequest.ICancelerIns>;\n\n  private promiseResolve!: IAppletsRequest.IResolved<any>;\n\n  static source(): ISourceReturn {\n    let cancel: (message: string) => void;\n\n    const token = new CancelToken((cancelFn) => {\n      cancel = cancelFn;\n    });\n    return {\n      token,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      cancel: cancel!,\n    };\n  }\n\n  constructor(executor?: IAppletsRequest.IEmptyFN) {\n    this.promise = new Promise((resolve) => {\n      this.promiseResolve = resolve;\n    });\n\n    if (typeof executor === \"function\") {\n      executor(this.cancel.bind(this));\n    }\n  }\n\n  cancel(message: string): void {\n    if (this.reason) {\n      return;\n    }\n    this.reason = new Cancel(message);\n    this.promiseResolve(this.reason);\n  }\n\n  subscribeCancelEvent(\n    listener: IAppletsRequest.IResolvedReturn<IAppletsRequest.ICancelerIns>\n  ): any {\n    return this.promise.then(listener);\n  }\n\n  throwIfRequested(): void {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n}\n","function getDataType(val: any): string {\n  return Object.prototype.toString.call(val);\n}\n\nexport function isDate(val: any): val is Date {\n  return getDataType(val) === \"[object Date]\";\n}\n\nexport function isObject(val: any): val is Record<string, any> {\n  return val !== null && typeof val === \"object\";\n}\n\nexport function isPlainObject(val: any): val is Record<string, any> {\n  if (val === null || getDataType(val) !== \"[object Object]\") {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\nexport function assign<T, U>(to: T, from: U): T & U {\n  if (isString(from)) {\n    return to as T & U;\n  }\n\n  for (const key in from) {\n    (to as T & U)[key] = from[key] as any;\n  }\n\n  return to as T & U;\n}\n\nexport function isUndefined(val: any): boolean {\n  return typeof val === \"undefined\";\n}\n\n/**\n * 遍历\n * @param {Object|Array} obj\n * @param fn\n */\nexport function forEach(obj: any, fn: IAppletsRequest.IEmptyFN): void {\n  if (typeof obj === \"undefined\" || obj === null) {\n    return;\n  }\n\n  let arr = obj;\n\n  // 如果obj是非object类型，例如：number，string等\n  if (typeof obj !== \"object\") {\n    arr = [obj];\n  }\n\n  if (Array.isArray(arr)) {\n    arr.forEach((item, i) => {\n      fn.call(null, item, i, obj);\n    });\n    return;\n  }\n  Object.keys(arr).forEach((key) => {\n    fn.call(null, arr[key], key, arr);\n  });\n}\n\nexport function merge(\n  ...objs: Record<string, any>[]\n): any[] | Record<string, any> {\n  if (objs.length === 0) {\n    return Object.create(null);\n  }\n\n  let result: any = Object.create(null);\n  function assignValue(val: any, key: string | number): void {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (Array.isArray(val)) {\n      result[key] = merge(val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  if (Array.isArray(objs[0])) {\n    result = [];\n  } else {\n    result = Object.create(null);\n  }\n\n  objs.forEach((obj) => {\n    forEach(obj, assignValue);\n  });\n\n  return result;\n}\n\nexport function isNumber(val: any): boolean {\n  return typeof val === \"number\";\n}\n\nexport function isString(val: any): boolean {\n  return typeof val === \"string\";\n}\n\nexport function isFunction(val: any): boolean {\n  return typeof val === \"function\";\n}\n","import { isUndefined } from \"../helpers/utils\";\n\nexport default function isCancel(canceler: any): boolean {\n  if (isUndefined(canceler)) {\n    return false;\n  }\n  return canceler && canceler.isCancel;\n}\n","export default function transformMethod(\n  method?: IAppletsRequest.IMethod | undefined\n): IAppletsRequest.INormalizeMethod {\n  if (!method || typeof method !== \"string\") {\n    return \"GET\";\n  }\n  return method.toUpperCase() as IAppletsRequest.INormalizeMethod;\n}\n","/* eslint-disable max-len */\n/*\n * @Author: youzhao.zhou\n * @Date: 2021-02-05 14:31:47\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-02-10 14:21:44\n * @Description http request adapter\n * 1. 自定义请求适配器接口规范\n * 2. 执行成功需要调用resolve\n * 3. 执行失败需要调用reject\n * 4. 监听用户取消时间执行abort\n *\n * @example:\n * 1. 创建实例：const adapter = new Adapter(config);\n * 2. 请求成功：adapter.resolve({headers: any, status: 200, data: {}, response: any}, resolve);\n * 3. 请求失败：adapter.reject({errMsg: \"Request Timeout\", status: \"TIMEOUT\", data: any, extra: any}, reject);\n * 4. 监听用户取消行为：adapter.abort((reason) => {\n *    // do something\n *    reject(reason);\n * });\n */\nimport { isUndefined, merge } from \"../helpers/utils\";\n\nexport default class Adapter {\n  private reqConfig: Omit<IAppletsRequest.IHttpConfig, \"Adapter\">;\n\n  constructor(config: IAppletsRequest.IHttpConfig) {\n    this.reqConfig = this.copyAdapterConfig(config);\n  }\n\n  /**\n   * 接口请求成功执行该方法\n   * @param options response数据\n   * @param resolve Promise.resolve\n   */\n  resolve(\n    options: IAppletsRequest.IAdapterResolveOptions,\n    resolve: IAppletsRequest.IResolved<any>\n  ): void {\n    if (isUndefined(options) || options === null) {\n      resolve({\n        headers: {},\n        status: 200,\n        data: {},\n        config: this.reqConfig,\n        originalRes: null,\n      });\n    }\n\n    resolve({\n      headers: options.headers,\n      config: this.reqConfig,\n      data: options.data,\n      status: options.status,\n      originalRes: isUndefined(options.response) ? null : options.response,\n    });\n  }\n\n  /**\n   * 接口请求失败执行该方法\n   * @param options response数据\n   * @param reject Promise.reject\n   */\n  reject(\n    options: IAppletsRequest.IAdapterRejectOptions,\n    reject: IAppletsRequest.IRejected\n  ): void {\n    if (isUndefined(options) || options === null) {\n      reject({\n        headers: null,\n        status: \"NETWORK_ERROR\",\n        errMsg: \"Reject arguments Error\",\n        data: null,\n        config: this.reqConfig,\n        extra: null,\n      });\n    }\n\n    reject({\n      status: options.status,\n      errMsg: options.errMsg,\n      config: this.reqConfig,\n      headers: options.headers || {},\n      data: options.data,\n      extra: isUndefined(options.extra) ? null : options.extra,\n    });\n  }\n\n  /**\n   * 取消接口请求\n   * @param listener 监听执行取消接口请求操作的监听函数\n   */\n  subscribeCancelEvent(\n    listener: (reason: IAppletsRequest.ICancelerIns) => any\n  ): any {\n    if (!this.reqConfig.cancelToken) {\n      return;\n    }\n\n    return this.reqConfig.cancelToken.subscribeCancelEvent(listener);\n  }\n\n  private copyAdapterConfig(\n    config: IAppletsRequest.IHttpConfig\n  ): Omit<IAppletsRequest.IHttpConfig, \"Adapter\"> {\n    if (isUndefined(config) || config === null) {\n      return {};\n    }\n    const reqConfig: any = merge({}, config);\n    delete reqConfig.Adapter;\n    return reqConfig;\n  }\n}\n","import transformMethod from \"../helpers/transformMethod\";\nimport Adapter from \"./Adapter\";\n\nexport type IAdapterFn = (\n  config: IAppletsRequestConfig\n) => IAppletsRequestPromise;\n\nexport default function getDefaultAdapter(): IAdapterFn {\n  return defaultAdapter;\n}\n\nfunction defaultAdapter(config: IAppletsRequestConfig): IAppletsRequestPromise {\n  const adapter = new Adapter({\n    method: transformMethod(config.method),\n    ...config,\n  } as IAppletsRequest.IHttpConfig);\n  return new Promise((resolve) => {\n    console.log(\n      \"defaultAdapter: \",\n      \"Pls set adapter!!! Don't use default adapter\"\n    );\n    adapter.resolve(\n      {\n        data: {},\n        headers: {},\n        status: 404,\n        response: null,\n      },\n      resolve\n    );\n  });\n}\n","import { forEach } from \"./utils\";\n\nexport default function normalizeHeaderName(\n  headers: any,\n  normalizedHeaderName: string\n) {\n  if (!normalizedHeaderName) {\n    return;\n  }\n  forEach(headers, (headerValue, headerName: string) => {\n    if (\n      headerName !== normalizedHeaderName &&\n      headerName.toUpperCase() === normalizedHeaderName.toUpperCase()\n    ) {\n      headers[normalizedHeaderName] = headerValue;\n      delete headers[headerName];\n    }\n  });\n}\n","import getDefaultAdapter from \"./adapters\";\nimport normalizeHeaderName from \"./helpers/normalizeHeaderName\";\nimport setContentTypeIfUnset from \"./helpers/setContentTypeIfUnset\";\nimport { isPlainObject } from \"./helpers/utils\";\n\nconst DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n\nconst defaults: IAppletsRequestConfig = {\n  adapter: getDefaultAdapter(),\n\n  method: \"GET\",\n\n  timeout: 10000,\n\n  headers: {\n    common: {\n      Accept: \"application/json, text/plain, */*\",\n    },\n    ...getDefaultHeaders(),\n  },\n\n  transformConfig: [],\n\n  transformRequest: [\n    (data, headers): IAppletsRequest.IDataType => {\n      normalizeHeaderName(headers, \"Accept\");\n      normalizeHeaderName(headers, \"Content-Type\");\n\n      if (isPlainObject(data)) {\n        setContentTypeIfUnset(headers, \"application/json; charset=utf-8\");\n      }\n      return data;\n    },\n  ],\n\n  transformResponse: [],\n\n  xsrfCookieName: \"XSRF-TOKEN\",\n  xsrfHeaderName: \"X-XSRF-TOKEN\",\n\n  validateStatus(status): boolean {\n    if (status >= 200 && status < 300) {\n      return true;\n    }\n\n    return false;\n  },\n};\n\nfunction getDefaultHeaders(): any {\n  const headers: any = {};\n  [\"delete\", \"get\", \"head\", \"options\"].forEach((method) => {\n    headers[method] = {};\n  });\n  [\"post\", \"put\", \"patch\"].forEach((method) => {\n    headers[method] = {\n      \"Content-Type\": DEFAULT_CONTENT_TYPE,\n    };\n  });\n\n  return headers;\n}\n\nexport const STORAGE_COOKIES_KEY = \"miniRequest:cookies\";\n\nexport default defaults;\n","import { isUndefined } from \"./utils\";\n\nexport default function setContentTypeIfUnset(\n  headers: any,\n  value: string\n): void {\n  if (\n    !isUndefined(headers) &&\n    headers &&\n    isUndefined(headers[\"Content-Type\"])\n  ) {\n    headers[\"Content-Type\"] = value;\n  }\n}\n","import { isUndefined } from \"../helpers/utils\";\n\n/**\n * 根据response.status的值来判断是不是NETWORK_ERROR(网络错误)，如：请求不可用等\n * @param response 任何类型的响应数据\n * @example\n * // return true\n * isNetworkError({status: \"NETWORK_ERROR\"});\n * // return false\n * isNetworkError({status: \"TIMEOUT\"});\n * // return false\n * isNetworkError({});\n * @returns true or false\n *\n */\nexport default function isNetworkError(response: any): boolean {\n  if (isUndefined(response) || response === null) {\n    return false;\n  }\n  return response.status === \"NETWORK_ERROR\";\n}\n","import { isUndefined } from \"../helpers/utils\";\n\n/**\n * 根据response.status的值来判断是不是TIMEOUT(超时)\n * @param response 任何类型的响应数据\n * @example\n * // return true\n * isTimeout({status: \"TIMEOUT\"});\n * // return false\n * isTimeout({status: \"NETWORK_ERROR\"});\n * // return false\n * isTimeout({});\n * @returns true or false\n *\n */\nexport default function isTimeout(response: any): boolean {\n  if (isUndefined(response) || response === null) {\n    return false;\n  }\n  return response.status === \"TIMEOUT\";\n}\n","/*\n * @Author: youzhao.zhou\n * @Date: 2021-02-08 13:43:58\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-02-08 13:49:22\n * @Description 将baseURL和relativeURL组合成完整的URL\n */\n\n/**\n * 将baseURL和relativeURL组合成完整的URL\n * @param baseURL defaults中配置的baseURL\n * @param relativeURL 请求的相对URL\n * @example\n * // returns https://xxx.com/api/login\n * combineURLs(\"https://xxx.com\", \"/api/login\")\n * @returns {string} Returns baseURL and relativeURL are spliced together\n */\nexport default function combineURLs(\n  baseURL: string | undefined,\n  relativeURL: string | undefined\n): string {\n  const tmpBaseURL = baseURL || \"\";\n  const tmpRelativeURL = relativeURL || \"\";\n\n  return tmpRelativeURL\n    ? `${tmpBaseURL.replace(/\\/+$/, \"\")}/${tmpRelativeURL.replace(/^\\/+/, \"\")}`\n    : tmpBaseURL;\n}\n","export default function isAbsoluteURL(url: string | undefined): boolean {\n  return /^([a-z][a-z\\d+-.]*:)?\\/\\//i.test(url || \"\");\n}\n","/*\n * @Author: youzhao.zhou\n * @Date: 2021-01-30 16:44:44\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-02-07 12:29:11\n * @Description 处理url，将params数据，以query的方式拼接到url上，\n * @example /demo?p1=12&p2=34\n *\n * 需要处理的逻辑有：\n * 1. 丢弃URL中哈希#部分\n * 2. 忽略null和undefined的数据\n * 3. 参数值为数组\n * 4. 参数值为对象\n * 5. 参数值为Date类型\n * 6. 可以出现在URL中的特殊字符\n * 7. 保留url中的参数\n */\n\nimport { isDate, isFunction, isObject, isPlainObject } from \"./utils\";\n\n/**\n * @returns [key, val]\n */\nexport type IParamsEntries = [string, string];\n\nfunction parseUrl(\n  url: string,\n  params: string | { [key: string]: any },\n  paramsSerializer?: IAppletsRequest.IEmptyFN\n): string {\n  const tmpUrl = removeHash(url);\n\n  if (typeof params === \"string\") {\n    return assembleUrl(tmpUrl, params);\n  }\n\n  const paramsKeys = Object.keys(!isObject(params) ? {} : params);\n\n  if (paramsKeys.length === 0 && !isFunction(paramsSerializer)) {\n    return tmpUrl;\n  }\n\n  const queryStr = isFunction(paramsSerializer)\n    ? paramsSerializer?.(params)\n    : parseQueryStr(paramsKeys, params);\n\n  if (!queryStr) {\n    return tmpUrl;\n  }\n\n  return assembleUrl(tmpUrl, queryStr);\n}\n\nfunction assembleUrl(url: string, queryStr: string): string {\n  return url.includes(\"?\") ? `${url}&${queryStr}` : `${url}?${queryStr}`;\n}\n\n/**\n * 移除值为null和undefined的属性\n * @param val params中的value\n */\nfunction removeNullAndUndefinedVal(val: any): boolean {\n  if (val === null || typeof val === \"undefined\") {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * 获取query str\n * @param paramsKeys string[]\n * @param params object\n * @returns demo=234&demo1=demo\n */\nfunction parseQueryStr(paramsKeys: string[], params: any): string {\n  const paramsEntries: IParamsEntries[] = paramsKeys\n    .filter((paramsKey) => removeNullAndUndefinedVal(params[paramsKey]))\n    .map((paramKey) => parseParam(paramKey, params[paramKey]));\n\n  if (paramsEntries.length === 0) {\n    return \"\";\n  }\n\n  return paramsEntries.reduce((preStr, curParam): string => {\n    if (!curParam[0] || !curParam[1]) {\n      return preStr;\n    }\n\n    return `${preStr ? `${preStr}&` : \"\"}${curParam.join(\"=\")}`;\n  }, \"\");\n}\n\nfunction parseParam(key: string, val: any): IParamsEntries {\n  if (Array.isArray(val)) {\n    return parseArrayVal(key, val);\n  }\n\n  if (isDate(val)) {\n    return [encode(key), encode(val.toISOString())];\n  }\n\n  if (isPlainObject(val)) {\n    return [encode(key), encode(JSON.stringify(val))];\n  }\n\n  return [key, val];\n}\n\n/**\n * 处理参数值类型为数组的参数\n * @param key 参数名\n * @param val 参数值\n * @returns [key, ${val[0]}&${key}[]=${val[1]}&....&${key}[]=${val[n]}]\n */\nfunction parseArrayVal(key: string, val: any[]): IParamsEntries {\n  const values = val.map((item, i) => {\n    if (i === 0) {\n      return item;\n    }\n    return `${encode(`${key}[]`)}=${encode(item)}`;\n  });\n  return [encode(`${key}[]`), values.join(\"&\")];\n}\n\nfunction removeHash(url: string): string {\n  return url.includes(\"#\") ? url.slice(0, url.indexOf(\"#\")) : url;\n}\n\nfunction encode(str: string): string {\n  return encodeURIComponent(str)\n    .replace(/%40/g, \"@\")\n    .replace(/%3A/gi, \":\")\n    .replace(/%24/g, \"$\")\n    .replace(/%2C/gi, \",\")\n    .replace(/%20/g, \"+\")\n    .replace(/%5B/gi, \"[\")\n    .replace(/%5D/gi, \"]\");\n}\n\nexport default function transformUrl(\n  url: string,\n  params?: any,\n  paramsSerializer?: IAppletsRequest.IEmptyFN\n): string {\n  if (!url) {\n    return removeHash(url);\n  }\n  return parseUrl(url, params, paramsSerializer);\n}\n","import { isFunction, isUndefined } from \"../helpers/utils\";\n\ninterface IInterceptor<T> {\n  fulfilled: IAppletsRequest.IResolved<T> | undefined;\n  rejected: IAppletsRequest.IRejected | undefined;\n}\n\nfunction isValidInterceptor(executor: any): boolean {\n  if (isUndefined(executor)) {\n    return true;\n  }\n\n  if (isFunction(executor)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport default class InterceptorManager<T> {\n  private interceptors: (IInterceptor<T> | null)[];\n\n  constructor() {\n    this.interceptors = [];\n  }\n\n  use(\n    fulfilled: IAppletsRequest.IResolved<T>,\n    rejected?: IAppletsRequest.IRejected\n  ): IAppletsRequest.IInterceptorId {\n    const interceptor: IInterceptor<T> = {\n      fulfilled: isValidInterceptor(fulfilled) ? fulfilled : undefined,\n      rejected: isValidInterceptor(rejected) ? rejected : undefined,\n    };\n    this.interceptors.push(interceptor);\n\n    return this.interceptors.length - 1;\n  }\n\n  eject(interceptorId: IAppletsRequest.IInterceptorId): void {\n    if (!this.interceptors[interceptorId]) {\n      return;\n    }\n    this.interceptors[interceptorId] = null;\n  }\n\n  forEach(\n    fn: (\n      interceptor: IInterceptor<T>,\n      interceptorId: IAppletsRequest.IInterceptorId\n    ) => void\n  ): void {\n    this.interceptors.forEach((interceptor, interceptorId) => {\n      if (typeof fn === \"function\" && interceptor !== null) {\n        fn(interceptor, interceptorId);\n      }\n    });\n  }\n\n  size(): number {\n    return this.interceptors.length;\n  }\n}\n","/*\n * @Author: youzhao.zhou\n * @Date: 2021-02-01 22:55:50\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-02-09 18:07:00\n * @Description 合并config\n */\n\nimport { forEach, isPlainObject, isUndefined, merge } from \"../helpers/utils\";\n\nexport default function mergeConfig(\n  config1: IAppletsRequestConfig,\n  optionalConfig2?: IAppletsRequestConfig\n): IAppletsRequestConfig {\n  const config2 = optionalConfig2 || {};\n\n  const config = Object.create(null);\n\n  // 只从config2获取值\n  const valueFromConfig2Keys = [\"url\", \"method\", \"data\"];\n\n  // 需要config1和config2中需要深合并的值\n  const requiredMergeDeepPropertiesKeys = [\"headers\", \"params\"];\n\n  // 只要在config2中存在key，就赋值config2[key]，不考虑null和undefined；\n  // 如果config2中不存在key，config1中存在该key，就赋值config1[key]；\n  // config1和config2都不存在，则跳过\n  const directMergeKeys = [\"validateStatus\", \"writeCookies\", \"readCookies\"];\n\n  // 优先从config2中取值，config2中没有值的，再从config1取值\n  const config2FirstConfig1DefaultKeys = [\n    \"baseURL\",\n    \"transformConfig\",\n    \"transformRequest\",\n    \"transformResponse\",\n    \"paramsSerializer\",\n    \"timeout\",\n    \"adapter\",\n    \"responseType\",\n    \"xsrfCookieName\",\n    \"xsrfHeaderName\",\n    \"cancelToken\",\n  ];\n\n  valueFromConfig2Keys.forEach(getValueFromConfig2);\n\n  config2FirstConfig1DefaultKeys.forEach(getValueFromConfig2First);\n\n  directMergeKeys.forEach(getDirectValue);\n\n  requiredMergeDeepPropertiesKeys.forEach(deepMergeConfig);\n\n  /**\n   * 只从config2获取值\n   * @param key\n   */\n  function getValueFromConfig2(key: string): void {\n    const val = config2[key];\n    if (isUndefined(val)) {\n      return;\n    }\n    config[key] = mergeObject(val);\n  }\n\n  /**\n   * 优先从config2中取值，config2中没有值的，再从config1取值\n   * @param key\n   */\n  function getValueFromConfig2First(key: string): void {\n    const val = config2[key];\n    if (!isUndefined(val)) {\n      config[key] = mergeObject(val);\n      return;\n    }\n    if (!isUndefined(config1[key])) {\n      config[key] = mergeObject(config1[key]);\n    }\n  }\n\n  /**\n   * config2中key就用config2，没有就用config1\n   * @param key\n   */\n  function getDirectValue(key: string): void {\n    if (key in config2) {\n      config[key] = mergeObject(config2[key]);\n      return;\n    }\n    if (key in config1) {\n      config[key] = mergeObject(config1[key]);\n    }\n  }\n\n  function deepMergeConfig(key: string): void {\n    const val1 = config1[key];\n    const val2 = config2[key];\n    // 如果两个config1和config2都有值，那么合并两个值\n    if (!isUndefined(val2)) {\n      config[key] = getMergeValue(val1, val2);\n      return;\n    }\n\n    if (!isUndefined(val1)) {\n      config[key] = getMergeValue(undefined, val1);\n    }\n  }\n\n  function getMergeValue(target: any, source: any): any {\n    if (isPlainObject(target) && isPlainObject(source)) {\n      return merge(target, source);\n    }\n\n    if (isPlainObject(source)) {\n      return merge({}, source);\n    }\n\n    return mergeObject(source);\n  }\n\n  function mergeObject(val: any): any {\n    if (Array.isArray(val)) {\n      return merge(val);\n    }\n    if (isPlainObject(val)) {\n      return merge(val);\n    }\n    return val;\n  }\n\n  const hadMergeKeys = valueFromConfig2Keys\n    .concat(requiredMergeDeepPropertiesKeys)\n    .concat(directMergeKeys)\n    .concat(requiredMergeDeepPropertiesKeys);\n\n  const remainKeys = Object.keys(config1)\n    .concat(Object.keys(config2))\n    .filter((key) => !hadMergeKeys.includes(key));\n\n  forEach(remainKeys, deepMergeConfig);\n\n  return config;\n}\n","/*\n * @Author: youzhao.zhou\n * @Date: 2021-01-31 11:14:33\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-02-10 17:10:35\n * @Description 处理请求headers和处理响应headers\n */\nimport { isPlainObject, isString, merge } from \"./utils\";\n\n/**\n * 格式化请求头中key的格式\n * @param headers 请求头数据\n * @param normalizedNames 标准的请求头key值，如：[\"Content-Type\"]\n * @example\n * // Returns {\"Content-Type\", \"plain/text\"}\n * formatterHeader({\"content-type\": \"plain/text\"}, [\"Content-Type\"]);\n * @returns {Object} 返回标准化的请求头数据\n */\nexport function formattedHeader(\n  headers: any,\n  normalizedNames: string[]\n): Record<string, string> {\n  const normalizedHeaders: Record<string, string> = {};\n  if (!isPlainObject(headers)) {\n    return normalizedHeaders;\n  }\n\n  if (normalizedNames.length === 0) {\n    return headers;\n  }\n\n  const headerUpperKeyMapping: Record<string, string> = {};\n  normalizedNames.forEach((key) => {\n    headerUpperKeyMapping[key.toUpperCase()] = key;\n  });\n\n  Object.keys(headers).forEach((header) => {\n    const upperHeader = header.toUpperCase();\n    const normalizedKey = headerUpperKeyMapping[upperHeader];\n    normalizedHeaders[normalizedKey || header] = headers[header];\n  });\n\n  return normalizedHeaders;\n}\n\n/**\n * 先将headers的key标准化处理，如果未设置Content-Type的，根据传输的数据类型，设置Content-Type的值\n * @param headers 请求头\n * @param data 请求body体中的数据\n * @example\n * // return {\"Content-Type\": \"application/json; charset=utf-8\"}\n * assembleReqHeaders({}, {username: \"tome\"});\n * @returns {Record<string, string>}\n */\nexport default function assembleReqHeaders(\n  headers: any,\n  data: IAppletsRequest.IDataType | undefined\n): Record<string, string> {\n  const reqHeaders = formattedHeader(Object.assign(headers || {}), [\n    \"Content-Type\",\n  ]);\n\n  if (isPlainObject(data) && !reqHeaders[\"Content-Type\"]) {\n    reqHeaders[\"Content-Type\"] = \"application/json; charset=utf-8\";\n  }\n\n  if (data === null || typeof data === \"undefined\") {\n    delete reqHeaders[\"Content-Type\"];\n  }\n\n  return reqHeaders;\n}\n\n/**\n * 合并headers中【headers.common】[headers[method]】数据，删除不需要的默认属性\n * @param headers 请求头数据\n * @param method 请求method\n * @example\n * // Return {\"Content-Type\": \"plain/text\", \"Accept\": \"*\"}\n * filterHeaders({\n *   common: {\n *     \"Content-Type\": \"plain/text\"\n *   },\n *   post: {\n *     \"Accept\": \"*\"\n *   }\n * }, \"post\");\n * @returns {Record<string, any>} 返回完整可用的headers\n *\n * {\"Content-Type\": \"plain/text\", \"Accept\": \"*\"}\n */\nexport function filterHeaders(\n  headers: Record<string, any> | undefined,\n  method: string\n): Record<string, any> {\n  if (!headers) {\n    return {};\n  }\n\n  const mergedHeaders: Record<string, any> = merge(\n    headers.common,\n    headers[method.toLowerCase()],\n    headers\n  );\n\n  [\n    \"delete\",\n    \"get\",\n    \"post\",\n    \"head\",\n    \"patch\",\n    \"put\",\n    \"options\",\n    \"common\",\n  ].forEach((deleteMethod) => {\n    delete mergedHeaders[deleteMethod];\n  });\n\n  return mergedHeaders;\n}\n\n/**\n * 和原有的cookie string拼接成新的cookie string\n * @param cookiesString header中已存在的cookie string\n * @param cookieName 需要新加入的cookie keyName\n * @example\n * // return token=tokenString; username=tom\n * combineCookieStr(\"token=tokenString\", \"username\");\n * @returns {string} 拼接后的cookie string\n */\nexport function combineCookiesStr(\n  cookiesString: string | undefined,\n  cookieName: string | undefined,\n  cookieVal: any\n): any {\n  if (!cookieName && String(cookieName) !== String(0)) {\n    return cookiesString;\n  }\n\n  if (!isString(cookiesString)) {\n    return !cookieVal && String(cookieVal) !== \"0\"\n      ? cookieName\n      : `${spliceCookieStr(cookieName as string, cookieVal)}`;\n  }\n  return `${cookiesString}; ${spliceCookieStr(\n    cookieName as string,\n    cookieVal\n  )}`;\n}\n\nfunction spliceCookieStr(cookieName: string, cookieVal: any): string {\n  return !cookieVal && String(cookieVal) !== \"0\"\n    ? cookieName\n    : `${cookieName}=${cookieVal}`;\n}\n","/*\n * @Author: youzhao.zhou\n * @Date: 2021-02-02 18:26:33\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-02-18 16:03:07\n * @Description 执行transform config，并且转换成对应环境的配置文件\n */\n\nimport copyConfig from \"../helpers/copyConfig\";\nimport { forEach } from \"../helpers/utils\";\n\nexport default function transformConfig(\n  config: IAppletsRequestConfig,\n  fns: IAppletsRequestConfig[\"transformConfig\"]\n): IAppletsRequestConfig {\n  let formattedConfig = config;\n\n  forEach(fns, (fn) => {\n    if (typeof fn === \"function\") {\n      formattedConfig = fn(formattedConfig);\n    }\n  });\n\n  return copyConfig(formattedConfig);\n}\n","/*\n * @Author: youzhao.zhou\n * @Date: 2021-02-02 18:16:24\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-02-08 13:39:12\n * @Description 创建副本，避免引用类型影响\n */\n\nimport { merge } from \"./utils\";\n\nexport default function copyConfig(\n  config: IAppletsRequestConfig | undefined | null\n): IAppletsRequestConfig {\n  if (!config) {\n    return {};\n  }\n  if (Array.isArray(config)) {\n    return merge([], config);\n  }\n\n  return merge({}, config) as IAppletsRequestConfig;\n}\n","/*\n * @Author: youzhao.zhou\n * @Date: 2021-02-02 17:57:28\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-02-18 16:01:15\n * @Description transformRequest和transformResponse辅助函数\n */\n\nimport { forEach } from \"../helpers/utils\";\n\nexport type ITransformer =\n  | IAppletsRequest.ITransformer\n  | IAppletsRequest.ITransformer[];\n\n/**\n * custom data format\n * @param data request data\n * @param headers request headers\n * @param fns transformData function in config\n */\nexport default function transformData(\n  data: any,\n  headers: any,\n  fns: ITransformer | undefined\n): IAppletsRequest.IDataType {\n  let formattedData = data;\n\n  forEach(fns, (fn) => {\n    if (typeof fn === \"function\") {\n      formattedData = fn(formattedData, headers);\n    }\n  });\n\n  return formattedData;\n}\n","import { STORAGE_COOKIES_KEY } from \"../defaults\";\nimport { isFunction, isUndefined } from \"../helpers/utils\";\n\nexport default function getCookies(\n  config: IAppletsRequestConfig\n): Record<string, any> {\n  if (!config || !isFunction(config.readCookies)) {\n    return {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return config.readCookies!(STORAGE_COOKIES_KEY) as Record<string, any>;\n}\n\nexport function getCookie(\n  cookies: Record<string, any>,\n  cookieName: string | undefined\n): string {\n  if (!cookies || !cookieName) {\n    return \"\";\n  }\n  const cookie = cookies[cookieName];\n\n  return isUndefined(cookie) || cookie === null ? \"\" : cookies[cookieName];\n}\n","import { isUndefined } from \"../helpers/utils\";\n\n/**\n * Module variables.\n * @private\n */\n\nconst decode = decodeURIComponent;\nconst encode = encodeURIComponent;\nconst pairSplitRegExp = /; */;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\n// eslint-disable-next-line no-control-regex\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n *\n * @param {string} cookiesStr cookies字符串\n * @param options\n */\nexport default function parseCookies(\n  cookiesStr: any,\n  options: any = {}\n): Record<string, string> {\n  if (!cookiesStr) {\n    return {};\n  }\n\n  return parse(cookiesStr, options);\n}\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(cookiesStr: string, options: any = {}): Record<string, string> {\n  if (typeof cookiesStr !== \"string\") {\n    return {};\n  }\n\n  const cookies: Record<string, string> = {};\n  const pairs = cookiesStr.split(pairSplitRegExp);\n  const decodeFn = options.decode || decode;\n\n  pairs.forEach((pair: string) => {\n    const qeInd = pair.indexOf(\"=\");\n    if (qeInd < 0) {\n      return;\n    }\n\n    const key = pair.substr(0, qeInd).trim();\n    let val = pair.substr(qeInd + 1, pair.length).trim();\n\n    // 如果val是含有“”的字符串，则删除“”\n    if (val[0] === '\"') {\n      val = val.slice(1, -1);\n    }\n\n    if (isUndefined(cookies[key])) {\n      cookies[key] = tryDecode(val, decodeFn);\n    }\n  });\n\n  return cookies;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\nexport function serializeCookie(\n  name: string,\n  val: string,\n  options: any = {}\n): string {\n  const encodeFn = options.encode || encode;\n\n  serializeThrowErr(typeof encodeFn !== \"function\", \"option encode is invalid\");\n  serializeThrowErr(!regPass(name), \"argument name is invalid\");\n\n  const value = encodeFn(val);\n\n  serializeThrowErr(!regPass(value), \"argument val is invalid\");\n\n  let str = `${name}=${value}`;\n\n  if (options.maxAge || options.maxAge === 0) {\n    const maxAge = options.maxAge - 0;\n\n    serializeThrowErr(\n      Number.isNaN(maxAge) || !Number.isFinite(maxAge),\n      \"option maxAge is invalid\"\n    );\n\n    str += `; Max-Age=${Math.floor(maxAge)}`;\n  }\n\n  if (options.domain) {\n    serializeThrowErr(!regPass(options.domain), \"option domain is invalid\");\n\n    str += `; Domain=${options.domain}`;\n  }\n\n  if (options.path) {\n    serializeThrowErr(!regPass(options.path), \"option path is invalid\");\n\n    str += `; Path=${options.path}`;\n  }\n\n  if (options.expires) {\n    serializeThrowErr(\n      typeof options.expires.toUTCString !== \"function\",\n      \"option expires is invalid\"\n    );\n\n    str += `; Expires=${options.expires.toUTCString()}`;\n  }\n\n  if (options.httpOnly) {\n    str += \"; HttpOnly\";\n  }\n\n  if (options.secure) {\n    str += \"; Secure\";\n  }\n\n  if (options.sameSite) {\n    str += getSameSiteCookieStr(options.sameSite);\n  }\n\n  return str;\n}\n\nfunction getSameSiteCookieStr(sameSite: string | boolean): string {\n  const tmpSameSite =\n    typeof sameSite === \"string\" ? sameSite.toLowerCase() : sameSite;\n\n  if (tmpSameSite === true || tmpSameSite === \"strict\") {\n    return \"; SameSite=Strict\";\n  }\n\n  if (tmpSameSite === \"lax\") {\n    return \"; SameSite=Lax\";\n  }\n\n  if (tmpSameSite === \"none\") {\n    return \"; SameSite=None\";\n  }\n\n  throw new TypeError(\"option sameSite is invalid\");\n}\n\nfunction serializeThrowErr(isErr: boolean, errMsg: string): never | void {\n  if (!isErr) {\n    return;\n  }\n  throw new TypeError(errMsg);\n}\n\nfunction regPass(data: any): boolean {\n  return Boolean(data) && fieldContentRegExp.test(data);\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str: string, decodeFn: any): string {\n  try {\n    return decodeFn(str);\n  } catch (e) {\n    return str;\n  }\n}\n","/*\n * @Author: youzhao.zhou\n * @Date: 2021-01-31 21:52:37\n * @Last Modified by: youzhao.zhou\n * @Last Modified time: 2021-02-18 15:36:25\n * @Description 处理错误\n */\n\nexport default class AppletsRequestError {\n  errMsg: string;\n\n  config: IAppletsRequest.IHttpConfig;\n\n  status: IAppletsRequestStatus;\n\n  response: IAppletsRequestResponse | undefined;\n\n  extra = null;\n\n  constructor(\n    message: string,\n    config: IAppletsRequest.IHttpConfig,\n    status: IAppletsRequestStatus,\n    response: IAppletsRequestResponse | undefined,\n    extra?: any\n  ) {\n    // super(message);\n\n    this.errMsg = message;\n    this.config = config;\n    this.status = status;\n    this.response = response;\n    this.extra = extra;\n\n    // Object.setPrototypeOf(this, AppletsRequestError.prototype);\n  }\n}\n\n/**\n * 构建错误对象\n * @example\n * createError(\"Err Msg\", config, status, response, extra)\n * @returns\n * {\n *  errMsg: string,\n *  config: config,\n *  status: http status,\n *  response: adapter response,\n *  extra: any other info,\n * }\n */\nexport function createError(\n  message: string,\n  config: IAppletsRequest.IHttpConfig,\n  status: IAppletsRequestStatus,\n  response: IAppletsRequestResponse | undefined,\n  extra?: any\n): AppletsRequestError {\n  const tmpStatus = !status && status !== 0 ? \"NETWORK_ERROR\" : status;\n\n  return new AppletsRequestError(message, config, tmpStatus, response, extra);\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport assembleReqHeaders, {\n  combineCookiesStr,\n  filterHeaders,\n  formattedHeader,\n} from \"../helpers/assembleHeaders\";\nimport transformMethod from \"../helpers/transformMethod\";\nimport transformUrl from \"../helpers/transformUrl\";\nimport transformConfig from \"./transformConfig\";\nimport transformData from \"./transformData\";\nimport isCancel from \"../cancel/isCancel\";\nimport isURLSameOrigin from \"../helpers/isURLSameOrigin\";\nimport getCookies, { getCookie } from \"../cookie/getCookies\";\nimport { isPlainObject } from \"../helpers/utils\";\nimport parseCookies from \"../cookie/parseCookie\";\nimport { createError } from \"./AppletsRequestError\";\nimport combineURLs from \"../helpers/combineURLs\";\nimport isAbsoluteURL from \"../helpers/isAbsoluteURL\";\nimport Adapter from \"../adapters/Adapter\";\nimport writeCookies from \"../cookie/writeCookies\";\n\nasync function request(\n  config: IAppletsRequestConfig\n): Promise<IAppletsRequestResponse> {\n  const transformedConfig = formattedConfig(config);\n\n  try {\n    const res = await config.adapter!(transformedConfig);\n\n    throwIfCancellationRequested(transformedConfig);\n\n    if (isPlainObject(res.headers)) {\n      res.cookies = parseCookies(\n        formattedHeader(res.headers, [\"Set-Cookie\"])[\"Set-Cookie\"]\n      );\n    }\n\n    writeCookies(config, res.cookies);\n\n    if (\n      typeof config.validateStatus === \"function\" &&\n      config.validateStatus(res.status)\n    ) {\n      res.data = transformData(\n        res.data,\n        res.headers,\n        transformedConfig.transformResponse\n      );\n\n      return res;\n    }\n\n    return Promise.reject(\n      createError(\n        `Request failed with status code ${res.status}`,\n        res.config,\n        res.status,\n        res\n      )\n    );\n  } catch (reason) {\n    if (isCancel(reason)) {\n      return Promise.reject(reason);\n    }\n\n    throwIfCancellationRequested(transformedConfig);\n\n    const err = reason as IAppletsRequestRejectData;\n\n    if (err && err.response) {\n      err.response.data = transformData(\n        err.response.data,\n        err.response.headers,\n        transformedConfig.transformResponse\n      );\n    }\n\n    if (err instanceof TypeError) {\n      return Promise.reject(\n        createError(err.message, err.config, \"SCRIPT_ERROR\", err.response, err)\n      );\n    }\n\n    return Promise.reject(\n      createError(err.errMsg, err.config, err.status, err.response, err.extra)\n    );\n  }\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config: IAppletsRequestConfig): void {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\nfunction formattedConfig(\n  config: IAppletsRequestConfig\n): IAppletsRequest.IHttpConfig {\n  throwIfCancellationRequested(config);\n\n  const { baseURL, url, params } = config;\n  const combinedURL = isAbsoluteURL(url) ? url : combineURLs(baseURL, url!);\n  const formattedUrl = transformUrl(\n    combinedURL!,\n    params,\n    config.paramsSerializer\n  );\n  const method = transformMethod(config.method);\n\n  let transformedConfig: IAppletsRequestConfig = {\n    ...config,\n    // 过滤headers中无用的配置\n    headers: filterHeaders(config.headers, method),\n  };\n\n  // 先执行data转换\n  transformedConfig.data = transformData(\n    transformedConfig.data,\n    transformedConfig.headers,\n    transformedConfig.transformRequest\n  );\n\n  transformedConfig.headers = assembleReqHeaders(\n    transformedConfig.headers,\n    transformedConfig.data\n  );\n\n  // 后执行config转换，最后返回config副本，避免引用类型导致数据混乱问题\n  transformedConfig = transformConfig(\n    transformedConfig,\n    config.transformConfig\n  );\n\n  // 添加Cookie头\n  const cookiesStr = getCookiesStr(transformedConfig);\n  if (cookiesStr) {\n    transformedConfig.headers!.Cookies = cookiesStr;\n  }\n\n  // xsrf 防御\n  const xsrfToken = getCookie(\n    getCookies(config),\n    transformedConfig.xsrfCookieName\n  );\n  if (xsrfToken) {\n    transformedConfig.headers![transformedConfig.xsrfHeaderName!] = xsrfToken;\n  }\n\n  return {\n    ...transformedConfig,\n    url: formattedUrl,\n    method,\n    headers: transformedConfig.headers as Record<string, string>,\n    getRequestTask: formattedGetRequestTaskFunction(\n      transformedConfig.getRequestTask\n    ),\n    Adapter,\n  };\n}\n\nfunction formattedGetRequestTaskFunction(fn: any): () => any {\n  if (typeof fn === \"function\") {\n    return fn;\n  }\n  return (): void => {\n    // empty\n  };\n}\n\nfunction getCookiesStr(config: IAppletsRequestConfig): string {\n  if (config.withCredentials || isURLSameOrigin()) {\n    return combineCookiesStr(\n      config.headers!.Cookies as string,\n      config.xsrfCookieName,\n      getCookie(getCookies(config), config.xsrfCookieName)\n    );\n  }\n  return \"\";\n}\n\nexport default request;\n","import { STORAGE_COOKIES_KEY } from \"../defaults\";\nimport { isFunction } from \"../helpers/utils\";\n\nexport default function writeCookies(\n  config: IAppletsRequestConfig,\n  cookies: any\n): void {\n  if (!config.autoCookies || !isFunction(config.writeCookies)) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  config.writeCookies!(STORAGE_COOKIES_KEY, cookies);\n}\n","import CancelToken from \"../cancel/CancelToken\";\nimport isCancel from \"../cancel/isCancel\";\nimport defaults from \"../defaults\";\nimport isNetworkError from \"../error/isNetworkError\";\nimport isTimeout from \"../error/isTimeout\";\nimport combineURLs from \"../helpers/combineURLs\";\nimport isAbsoluteURL from \"../helpers/isAbsoluteURL\";\nimport transformUrl from \"../helpers/transformUrl\";\nimport { assign, isPlainObject } from \"../helpers/utils\";\nimport InterceptorManager from \"./InterceptorManager\";\nimport mergeConfig from \"./mergeConfig\";\nimport request from \"./request\";\n\ninterface IInterceptors {\n  request: InterceptorManager<IAppletsRequestConfig>;\n  response: InterceptorManager<IAppletsRequestResponse>;\n}\n\ninterface IPromiseChain<T> {\n  fulfilled:\n    | IAppletsRequest.IResolved<T>\n    | ((config: IAppletsRequestConfig) => IAppletsRequestPromise)\n    | undefined;\n  rejected?: IAppletsRequest.IRejected;\n}\n\nexport type URLType = string;\n\nexport default class AppletsRequest {\n  AppletsRequest = AppletsRequest;\n\n  CancelToken = CancelToken;\n\n  defaults: IAppletsRequestConfig = {};\n\n  interceptors: IInterceptors;\n\n  isCancel = isCancel;\n\n  isTimeout = isTimeout;\n\n  isNetworkError = isNetworkError;\n\n  constructor(config?: IAppletsRequestConfig) {\n    if (config) {\n      this.defaults = config;\n    }\n\n    this.interceptors = {\n      request: new InterceptorManager<IAppletsRequestConfig>(),\n      response: new InterceptorManager<IAppletsRequestResponse>(),\n    };\n  }\n\n  request(\n    options: URLType | IAppletsRequestConfig,\n    config?: IAppletsRequestConfig\n  ): IAppletsRequestPromise {\n    let formattedConfig: IAppletsRequestConfig = {};\n    if (typeof options === \"string\") {\n      formattedConfig = this.transformConfig(config);\n      formattedConfig.url = options;\n    } else {\n      formattedConfig = options;\n    }\n\n    formattedConfig = mergeConfig(this.defaults, formattedConfig);\n\n    const chain: IPromiseChain<any>[] = [\n      {\n        fulfilled: request,\n        rejected: undefined,\n      },\n    ];\n\n    this.interceptors.request.forEach((interceptor) =>\n      chain.unshift(interceptor)\n    );\n\n    this.interceptors.response.forEach((interceptor) =>\n      chain.push(interceptor)\n    );\n\n    let promise = Promise.resolve(formattedConfig);\n\n    chain.forEach((interceptor) => {\n      if (!interceptor) {\n        return;\n      }\n      promise = promise.then(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    return promise as IAppletsRequestPromise;\n  }\n\n  get(url: string, config?: IAppletsRequestConfig): IAppletsRequestPromise {\n    return this.requestWithMethod(url, \"GET\", config);\n  }\n\n  delete(url: string, config?: IAppletsRequestConfig): IAppletsRequestPromise {\n    return this.requestWithMethod(url, \"DELETE\", config);\n  }\n\n  head(url: string, config?: IAppletsRequestConfig): IAppletsRequestPromise {\n    return this.requestWithMethod(url, \"HEAD\", config);\n  }\n\n  options(url: string, config?: IAppletsRequestConfig): IAppletsRequestPromise {\n    return this.requestWithMethod(url, \"OPTIONS\", config);\n  }\n\n  post(\n    url: string,\n    data?: IAppletsRequest.IDataType,\n    config?: IAppletsRequestConfig\n  ): IAppletsRequestPromise {\n    return this.requestWithData(url, \"POST\", data, config);\n  }\n\n  put(\n    url: string,\n    data?: IAppletsRequest.IDataType,\n    config?: IAppletsRequestConfig\n  ): IAppletsRequestPromise {\n    return this.requestWithData(url, \"PUT\", data, config);\n  }\n\n  create(config?: IAppletsRequestConfig): AppletsRequestInstance {\n    const miniRequest = new AppletsRequest(mergeConfig(defaults, config));\n    const ins: AppletsRequestInstance = AppletsRequest.prototype.request.bind(\n      miniRequest\n    ) as AppletsRequestInstance;\n\n    return assign(ins, miniRequest);\n  }\n\n  all(promises: IAppletsRequestPromise[]): Promise<IAppletsRequestResponse[]> {\n    if (promises.length === 0) {\n      throw new TypeError(`arguments length is 0`);\n    }\n    return Promise.all(promises);\n  }\n\n  getUri(config: IAppletsRequestConfig): string {\n    const { url, baseURL, params } = config;\n    const tmpUrl = url || \"\";\n    const combinedURL = isAbsoluteURL(tmpUrl)\n      ? tmpUrl\n      : combineURLs(baseURL || \"\", tmpUrl);\n    const formattedUrl = transformUrl(\n      combinedURL,\n      params,\n      config.paramsSerializer\n    );\n    return formattedUrl;\n  }\n\n  private requestWithMethod(\n    url: string,\n    method: IAppletsRequest.IMethod,\n    config?: IAppletsRequestConfig\n  ): IAppletsRequestPromise {\n    return this.request({\n      ...this.transformConfig(config),\n      url,\n      method,\n    });\n  }\n\n  private requestWithData(\n    url: string,\n    method: IAppletsRequest.IMethod,\n    data?: IAppletsRequest.IDataType,\n    config?: IAppletsRequestConfig\n  ): IAppletsRequestPromise {\n    return this.requestWithMethod(url, method, {\n      ...this.transformConfig(config),\n      data,\n    });\n  }\n\n  private transformConfig(\n    config?: IAppletsRequestConfig\n  ): IAppletsRequestConfig {\n    return isPlainObject(config) ? config : {};\n  }\n}\n","import AppletsRequest from \"./core/AppletsRequest\";\n\n/**\n * 创建AppletsRequest实例\n * @param {IAppletsRequestConfig} config\n */\nexport function createAppletsRequestInstance(\n  config?: IAppletsRequestConfig\n): AppletsRequestInstance {\n  const request = new AppletsRequest(config);\n\n  return request.create(config);\n}\n\n/**\n * 默认miniRequest\n */\nconst miniRequest = createAppletsRequestInstance();\n\nexport default miniRequest;\n\nexport { AppletsRequest as AppletsRequest };\n"],"names":["message","this","Cancel","executor","promise","Promise","resolve","_this","promiseResolve","cancel","bind","CancelToken","token","cancelFn","reason","listener","then","getDataType","val","Object","prototype","toString","call","isPlainObject","getPrototypeOf","isUndefined","forEach","obj","fn","arr","Array","isArray","item","i","keys","key","merge","_i","objs","length","create","result","assignValue","isString","isFunction","isCancel","canceler","transformMethod","method","toUpperCase","config","reqConfig","copyAdapterConfig","Adapter","options","headers","status","data","originalRes","response","reject","errMsg","extra","cancelToken","subscribeCancelEvent","defaultAdapter","adapter","__assign","console","log","normalizeHeaderName","normalizedHeaderName","headerValue","headerName","defaults","timeout","common","Accept","Content-Type","transformConfig","transformRequest","value","setContentTypeIfUnset","transformResponse","xsrfCookieName","xsrfHeaderName","validateStatus","STORAGE_COOKIES_KEY","isNetworkError","isTimeout","combineURLs","baseURL","relativeURL","tmpBaseURL","tmpRelativeURL","replace","isAbsoluteURL","url","test","parseUrl","params","paramsSerializer","tmpUrl","removeHash","assembleUrl","paramsKeys","queryStr","paramsEntries","filter","paramsKey","removeNullAndUndefinedVal","map","paramKey","values","encode","join","parseArrayVal","isDate","toISOString","JSON","stringify","parseParam","reduce","preStr","curParam","parseQueryStr","includes","slice","indexOf","str","encodeURIComponent","transformUrl","isValidInterceptor","interceptors","InterceptorManager","fulfilled","rejected","interceptor","undefined","push","interceptorId","mergeConfig","config1","optionalConfig2","config2","valueFromConfig2Keys","requiredMergeDeepPropertiesKeys","directMergeKeys","deepMergeConfig","val1","val2","getMergeValue","target","source","mergeObject","hadMergeKeys","concat","formattedHeader","normalizedNames","normalizedHeaders","headerUpperKeyMapping","header","upperHeader","normalizedKey","filterHeaders","mergedHeaders","toLowerCase","deleteMethod","spliceCookieStr","cookieName","cookieVal","String","fns","formattedConfig","copyConfig","transformData","formattedData","getCookies","readCookies","getCookie","cookies","cookie","decode","decodeURIComponent","pairSplitRegExp","parseCookies","cookiesStr","pairs","split","decodeFn","pair","qeInd","substr","trim","e","tryDecode","parse","createError","AppletsRequestError","request","transformedConfig","throwIfCancellationRequested","formattedUrl","reqHeaders","assign","assembleReqHeaders","withCredentials","cookiesString","Cookies","getCookiesStr","xsrfToken","getRequestTask","formattedGetRequestTaskFunction","res","_a","autoCookies","writeCookies","reason_1","err","TypeError","throwIfRequested","AppletsRequest","chain","unshift","requestWithMethod","requestWithData","miniRequest","to","from","promises","all","createAppletsRequestInstance"],"mappings":"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"}